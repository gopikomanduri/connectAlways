// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef FRIEND_DETAILS_ODB_HXX
#define FRIEND_DETAILS_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20300UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "FriendDetails.hxx"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // contacts
  //
  template <>
  struct class_traits< ::contacts >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::contacts >
  {
    public:
    typedef ::contacts object_type;
    typedef ::contacts* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // contacts
  //
  template <typename A>
  struct query_columns< ::contacts, id_mysql, A >
  {
    // contactId
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    contactId_type_;

    static const contactId_type_ contactId;

    // fromUser
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    fromUser_type_;

    static const fromUser_type_ fromUser;

    // toUser
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    toUser_type_;

    static const toUser_type_ toUser;

    // status
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        int,
        mysql::id_long >::query_type,
      mysql::id_long >
    status_type_;

    static const status_type_ status;
  };

  template <typename A>
  const typename query_columns< ::contacts, id_mysql, A >::contactId_type_
  query_columns< ::contacts, id_mysql, A >::
  contactId (A::table_name, "`contactId`", 0);

  template <typename A>
  const typename query_columns< ::contacts, id_mysql, A >::fromUser_type_
  query_columns< ::contacts, id_mysql, A >::
  fromUser (A::table_name, "`fromUser`", 0);

  template <typename A>
  const typename query_columns< ::contacts, id_mysql, A >::toUser_type_
  query_columns< ::contacts, id_mysql, A >::
  toUser (A::table_name, "`toUser`", 0);

  template <typename A>
  const typename query_columns< ::contacts, id_mysql, A >::status_type_
  query_columns< ::contacts, id_mysql, A >::
  status (A::table_name, "`status`", 0);

  template <typename A>
  struct pointer_query_columns< ::contacts, id_mysql, A >:
    query_columns< ::contacts, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::contacts, id_mysql >:
    public access::object_traits< ::contacts >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // contactId
      //
      unsigned long long contactId_value;
      my_bool contactId_null;

      // _fromUser
      //
      details::buffer _fromUser_value;
      unsigned long _fromUser_size;
      my_bool _fromUser_null;

      // _toUser
      //
      details::buffer _toUser_value;
      unsigned long _toUser_size;
      my_bool _toUser_null;

      // status
      //
      int status_value;
      my_bool status_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::contacts, id_common >:
    public access::object_traits_impl< ::contacts, id_mysql >
  {
  };

  // contacts
  //
}

#include "FriendDetails-odb.ixx"

#include <odb/post.hxx>

#endif // FRIEND_DETAILS_ODB_HXX
